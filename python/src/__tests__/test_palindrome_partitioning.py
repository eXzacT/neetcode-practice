import pytest
from src.palindrome_partitioning import *

test_cases = [
    ("aab", [["a", "a", "b"], ["aa", "b"]]),
    ("abcasdbdsalaaababca", [['a', 'b', 'c', 'a', 's', 'd', 'b', 'd', 's', 'a', 'l', 'a', 'a', 'a', 'b', 'a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'd', 'b', 'd', 's', 'a', 'l', 'a', 'a', 'a', 'bab', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'd', 'b', 'd', 's', 'a', 'l', 'a', 'a', 'aba', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'd', 'b', 'd', 's', 'a', 'l', 'a', 'aa', 'b', 'a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'd', 'b', 'd', 's', 'a', 'l', 'a', 'aa', 'bab', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'd', 'b', 'd', 's', 'a', 'l', 'aa', 'a', 'b', 'a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'd', 'b', 'd', 's', 'a', 'l', 'aa', 'a', 'bab', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'd', 'b', 'd', 's', 'a', 'l', 'aa', 'aba', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'd', 'b', 'd', 's', 'a', 'l', 'aaa', 'b', 'a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'd', 'b', 'd', 's', 'a', 'l', 'aaa', 'bab', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'd', 'b', 'd', 's', 'ala', 'a', 'a', 'b', 'a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'd', 'b', 'd', 's', 'ala', 'a', 'a', 'bab', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'd', 'b', 'd', 's', 'ala', 'a', 'aba', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'd', 'b', 'd', 's', 'ala', 'aa', 'b', 'a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'd', 'b', 'd', 's', 'ala', 'aa', 'bab', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'dbd', 's', 'a', 'l', 'a', 'a', 'a', 'b', 'a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'dbd', 's', 'a', 'l', 'a', 'a', 'a', 'bab', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'dbd', 's', 'a', 'l', 'a', 'a', 'aba', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'dbd', 's', 'a', 'l', 'a', 'aa', 'b', 'a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'dbd', 's', 'a', 'l', 'a', 'aa', 'bab', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'dbd', 's', 'a', 'l', 'aa', 'a', 'b', 'a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'dbd', 's', 'a', 'l', 'aa', 'a', 'bab', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'dbd', 's', 'a', 'l', 'aa', 'aba', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'dbd', 's', 'a', 'l', 'aaa', 'b', 'a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'dbd', 's', 'a', 'l', 'aaa', 'bab', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'dbd', 's', 'ala', 'a', 'a', 'b', 'a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'dbd', 's', 'ala', 'a', 'a', 'bab', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'dbd', 's', 'ala', 'a', 'aba', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'dbd', 's', 'ala', 'aa', 'b', 'a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 's', 'dbd', 's', 'ala', 'aa', 'bab', 'c', 'a'], ['a', 'b', 'c', 'a', 'sdbds', 'a', 'l', 'a', 'a', 'a', 'b', 'a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 'sdbds', 'a', 'l', 'a', 'a', 'a', 'bab', 'c', 'a'], ['a', 'b', 'c', 'a', 'sdbds', 'a', 'l', 'a', 'a', 'aba', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 'sdbds', 'a', 'l', 'a', 'aa', 'b', 'a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 'sdbds', 'a', 'l', 'a', 'aa', 'bab', 'c', 'a'], ['a', 'b', 'c', 'a', 'sdbds', 'a', 'l', 'aa', 'a', 'b', 'a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 'sdbds', 'a', 'l', 'aa', 'a', 'bab', 'c', 'a'], ['a', 'b', 'c', 'a', 'sdbds', 'a', 'l', 'aa', 'aba', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 'sdbds', 'a', 'l', 'aaa', 'b', 'a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 'sdbds', 'a', 'l', 'aaa', 'bab', 'c', 'a'], ['a', 'b', 'c', 'a', 'sdbds', 'ala', 'a', 'a', 'b', 'a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 'sdbds', 'ala', 'a', 'a', 'bab', 'c', 'a'], ['a', 'b', 'c', 'a', 'sdbds', 'ala', 'a', 'aba', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 'sdbds', 'ala', 'aa', 'b', 'a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a', 'sdbds', 'ala', 'aa', 'bab', 'c', 'a'], ['a', 'b', 'c', 'asdbdsa', 'l', 'a', 'a', 'a', 'b', 'a', 'b', 'c', 'a'], ['a', 'b', 'c', 'asdbdsa', 'l', 'a', 'a', 'a', 'bab', 'c', 'a'], ['a', 'b', 'c', 'asdbdsa', 'l', 'a', 'a', 'aba', 'b', 'c', 'a'], ['a', 'b', 'c', 'asdbdsa', 'l', 'a', 'aa', 'b', 'a', 'b', 'c', 'a'], ['a', 'b', 'c', 'asdbdsa', 'l', 'a', 'aa', 'bab', 'c', 'a'], ['a', 'b', 'c', 'asdbdsa', 'l', 'aa', 'a', 'b', 'a', 'b', 'c', 'a'], ['a', 'b', 'c', 'asdbdsa', 'l', 'aa', 'a', 'bab', 'c', 'a'], ['a', 'b', 'c', 'asdbdsa', 'l', 'aa', 'aba', 'b', 'c', 'a'], ['a', 'b', 'c', 'asdbdsa', 'l', 'aaa', 'b', 'a', 'b', 'c', 'a'], ['a', 'b', 'c', 'asdbdsa', 'l', 'aaa', 'bab', 'c', 'a']]),
    ("a", [["a"]]),
]

functions = [globals()[name] for name in dir() if 'sol' in name]


@pytest.mark.parametrize("test_input,expected", test_cases)
def test_palindrome_partitioning(test_input, expected):
    print(f"\nFor input {test_input}")
    for func in functions:
        assert func(test_input) == expected
